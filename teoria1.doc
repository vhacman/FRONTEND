 Cos’è JavaScript
JavaScript è un linguaggio di programmazione:

creato per aggiungere interattività alle pagine web.
eseguito direttamente nel browser (ma può anche essere usato lato server con Node.js).
è interpretabile, dinamico e basato sugli oggetti.
segue il paradigma event-driven e supporta la programmazione funzionale e orientata agli oggetti.

Quando diciamo che JavaScript segue il paradigma event-driven e supporta la programmazione funzionale e orientata agli oggetti, stiamo parlando di modi diversi in cui si può scrivere e organizzare il codice in JavaScript


 Paradigma event-driven (guidato dagli eventi)
Significa che il codice JavaScript può essere scritto per reagire a eventi che avvengono nel browser o nell’ambiente di esecuzione.

Un evento è un'azione o un'accadimento che si verifica nel sistema, ad esempio:

-un click su un pulsante
-la pressione di un tasto sulla tastiera
-il caricamento di una pagina
-l’arrivo di una risposta da un server
✔ Come si reagisce a un evento?
Con una funzione di callback, cioè una funzione che viene "richiamata" quando l'evento accade.

EX:
document.getElementById("btn").addEventListener("click", function () {
  alert("Hai cliccato il pulsante!");
});

PROGRAMMAZIONE FUNZIONALE (functional programming)
È un modo di scrivere codice basato su funzioni pure, immutabilità e composizione.

Caratteristiche principali:
Le funzioni sono cittadini di prima classe: puoi assegnarle a variabili, passarle come argomenti, restituirle da altre funzioni.
Niente effetti collaterali: una funzione dovrebbe dipendere solo dai suoi input ed essere prevedibile.

Immutabilità: evitare di modificare i dati esistenti, preferendo crearne di nuovi.
ex:

const raddoppia = x => x * 2;

const numeri = [1, 2, 3];
const raddoppiati = numeri.map(raddoppia); // [2, 4, 6]




TIPI DI DATO PRIMITIVO:
| Tipo        | Esempio         | Spiegazione                    |
| ----------- | --------------- | ------------------------------ |
| `number`    | `42`, `3.14`    | numeri interi o decimali       |
| `string`    | `"ciao"`        | testo tra virgolette           |
| `boolean`   | `true`, `false` | vero o falso                   |
| `null`      | `null`          | assenza intenzionale di valore |
| `undefined` | `undefined`     | valore non ancora assegnato    |
| `symbol`    | `Symbol('x')`   | identificatori unici           |
| `bigint`    | `123n`          | numeri interi enormi           |

TIPO DI DATO COMPLESSO:
OGGETTI
ARRAY

oggetto: 
let persona = {
  nome: "Luca",
  età: 30,
  saluta: function() {
    console.log("Ciao!");
  }
};

Array: --> lista
let colori = ["rosso", "verde", "blu"];


LE VARIABILI:
| Parola chiave | Ambito      | Riassegnabile | Spiegazione breve           |
| ------------- | ----------- | ------------- | --------------------------- |
| `var`         | funzione    | sì            | vecchio, **evitare** oggi   |
| `let`         | blocco `{}` | sì            | moderno, flessibile         |
| `const`       | blocco `{}` | no            | costante, non riassegnabile |

FUNZIONE:
un blocco di codice riutilizzabile, che può prendere dati in ingresso (parametri) e restituire un valore. 

function somma(a, b) {
  return a + b;
}

COSA SONO I METODI
UN metodo è una funzione associata a un oggetto.
ex:

let persona = {
  nome: "Luca",
  saluta: function() {
    console.log("Ciao, sono " + this.nome);
  }
};

persona.saluta(); // metodo

saluta --> metodo di 'persona'
this.nome fa riferimento all'attributo nome dell'oggetto.

ESECUZIONE E INTERPRETAZIONE

Il codice JavaScript è eseguito dal browser, riga per riga (linguaggio interpretato).
Ogni script ha un event loop, cioè un meccanismo che gestisce il flusso di eventi e funzioni da eseguire.
Le funzioni asincrone (come setTimeout, fetch, eventListener, requestAnimationFrame) non bloccano l’esecuzione del codice: vengono messe in coda e gestite quando pronte.
